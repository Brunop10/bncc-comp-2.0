import { useState } from 'react'
import type { GeminiResponse } from '@/types/chat'
import type { AbilityDTO } from '@/dtos/ability-dto'
import { getAbilities } from '@/api/get-abilities'

const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent'

interface SendMessageOptions {
  message: string
}

const extractCodes = (message: string): string[] => {
  const codePattern = /\b[A-Z]{2}\d{2}[A-Z]{2}\d{2}\b/g
  const matches = message.match(codePattern) || []
  return matches.map(code => code.toUpperCase())
}

const extractKeywords = (message: string): string => {
  const cleanMessage = message.toLowerCase().replace(/[^\w\s]/g, ' ')
  
  const bnccKeywords = [
    'algoritmo', 'programa√ß√£o', 'c√≥digo', 'computacional', 'digital',
    'dados', 'informa√ß√£o', 'tecnologia', 'internet', 'software',
    'hardware', 'rede', 'seguran√ßa', 'privacidade', '√©tica',
    'pensamento', 'l√≥gica', 'resolu√ß√£o', 'problema', 'abstra√ß√£o',
    'decomposi√ß√£o', 'padr√£o', 'automatizar', 'bncc', 'compet√™ncia', 
    'objetivo', 'grafos', 'listas', '√°rvore', 'matrizes',
  ]
  
  const words = cleanMessage.split(/\s+/).filter(word => word.length > 2)
  
  const relevantWords = words.filter(word => 
    bnccKeywords.some(keyword => 
      word.includes(keyword) || keyword.includes(word)
    )
  )
  
  if (relevantWords.length === 0) {
    return words.slice(0, 3).join(' ')
  }
  
  return relevantWords.slice(0, 15).join(' ')
}

const extractYears = (message: string): number | null => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('primeiro ao quinto') ||
      lowerMessage.includes('1¬∫ ao 5¬∫') ||
      lowerMessage.includes('anos iniciais') || 
      lowerMessage.includes('ensino fundamental i') ||
      lowerMessage.includes('fundamental anos iniciais')) {
    return 15;
  }
  else if (lowerMessage.includes('sexto ao nono') ||
           lowerMessage.includes('6¬∫ ao 9¬∫') ||
           lowerMessage.includes('anos finais') || 
           lowerMessage.includes('ensino fundamental ii') ||
           lowerMessage.includes('fundamental anos finais')) {
    return 69;
  }
  else if (lowerMessage.includes('educa√ß√£o infantil') || 
           lowerMessage.includes('infantil') ||
           lowerMessage.includes('pr√©-escola') ||
           lowerMessage.includes('creche')) {
    return 0;
  }
  else if (lowerMessage.includes('9¬∫ ano') || lowerMessage.includes('nono ano')) {
    return 9;
  }
  else if (lowerMessage.includes('8¬∫ ano') || lowerMessage.includes('oitavo ano')) {
    return 8;
  }
  else if (lowerMessage.includes('7¬∫ ano') || lowerMessage.includes('s√©timo ano')) {
    return 7;
  }
  else if (lowerMessage.includes('6¬∫ ano') || lowerMessage.includes('sexto ano')) {
    return 6;
  }
  else if (lowerMessage.includes('5¬∫ ano') || lowerMessage.includes('quinto ano')) {
    return 5;
  }
  else if (lowerMessage.includes('4¬∫ ano') || lowerMessage.includes('quarto ano')) {
    return 4;
  }
  else if (lowerMessage.includes('3¬∫ ano') || lowerMessage.includes('terceiro ano')) {
    return 3;
  }
  else if (lowerMessage.includes('2¬∫ ano') || lowerMessage.includes('segundo ano')) {
    return 2;
  }
  else if (lowerMessage.includes('1¬∫ ano') || lowerMessage.includes('primeiro ano')) {
    return 1;
  }

  return null;
};
const extractAxes = (message: string): string[] => {
  const axes: string[] = []
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('pensamento') || lowerMessage.includes('computacional') || 
      lowerMessage.includes('algoritmo') || lowerMessage.includes('l√≥gica')) {
    axes.push('Pensamento Computacional')
  }
  
  if (lowerMessage.includes('mundo') || lowerMessage.includes('digital') || 
      lowerMessage.includes('tecnologia') || lowerMessage.includes('hardware') || 
      lowerMessage.includes('software')) {
    axes.push('Mundo Digital')
  }
  
  if (lowerMessage.includes('cultura') || lowerMessage.includes('√©tica') || 
      lowerMessage.includes('cidadania') || lowerMessage.includes('sociedade')) {
    axes.push('Cultura Digital')
  }
  
  return axes
}

const SYSTEM_INSTRUCTION = 
`Voc√™ √© um assistente especializado em BNCC (Base Nacional Comum Curricular) de Computa√ß√£o.

**REGRAS IMPORTANTES:**
1. Se a pergunta N√ÉO for sobre computa√ß√£o, programa√ß√£o, pensamento computacional, tecnologia ou BNCC, responda: "Sou especializado em BNCC de Computa√ß√£o. Para outras quest√µes, consulte fontes espec√≠ficas da √°rea."
2. SEMPRE use as informa√ß√µes espec√≠ficas das habilidades fornecidas no contexto quando dispon√≠veis
3. Para habilidades espec√≠ficas (c√≥digos como EF03CO01), OBRIGATORIAMENTE use a descri√ß√£o e explica√ß√£o fornecidas
4. Seja pr√°tico, educacional e cite exemplos concretos baseados nas informa√ß√µes espec√≠ficas
5. NUNCA diga que n√£o tem informa√ß√µes se elas est√£o no contexto
6. Conecte sempre que poss√≠vel com os eixos: Pensamento Computacional, Mundo Digital e Cultura Digital`

export function useGeminiAPI() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const fetchBNCCContext = async (message: string): Promise<AbilityDTO[]> => {
    try {
      console.log('üîç Buscando contexto BNCC para:', message)
      
      const codes = extractCodes(message)
      const year = extractYears(message) 
      const axes = extractAxes(message)
      const keywords = extractKeywords(message)
      
      let result
      
      if (codes.length > 0) {
        console.log('üéØ Estrat√©gia: busca por c√≥digos', codes)
        result = await getAbilities({ codes })
      } else if (year !== null) { 
        console.log('üéØ Estrat√©gia: busca por ano', year)
        result = await getAbilities({ year: year.toString() })
      } else if (axes.length > 0) {
        console.log('üéØ Estrat√©gia: busca por eixo', axes[0])
        result = await getAbilities({ axe: axes[0] })
      } else if (keywords.length > 0) {
        console.log('üéØ Estrat√©gia: busca por palavras-chave', keywords)
        result = await getAbilities({ keywords })
      } else {
        console.log('‚ö†Ô∏è Nenhuma estrat√©gia aplic√°vel - retornando vazio')
        return []
      }
      
      const abilities = result?.abilities?.slice(0, 15) || []
      console.log('‚úÖ Contexto BNCC encontrado:', abilities.length, 'habilidades')
      return abilities
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar contexto BNCC:', error)
      return []
    }
  }

  const sendMessage = async ({ message }: SendMessageOptions): Promise<string> => {
    setIsLoading(true)
    setError(null)

    try {
      const bnccAbilities = await fetchBNCCContext(message)
      
      const contextAndMessage = createContextAndMessage(message, bnccAbilities)
      
      console.log('üöÄ Enviando para Gemini com contexto:', bnccAbilities.length, 'habilidades')
      
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY
      if (!apiKey) {
        throw new Error('API key do Gemini n√£o configurada')
      }

      const response = await fetch(`${GEMINI_API_URL}?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          system_instruction: {
            parts: [{ text: SYSTEM_INSTRUCTION }]
          },
          contents: [{
            parts: [{ text: contextAndMessage }]
          }]
        })
      })

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`)
      }

      const data: GeminiResponse = await response.json()
      const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text || 'Resposta n√£o dispon√≠vel'
      
      return responseText
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro desconhecido'
      setError(errorMessage)
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const createContextAndMessage = (userMessage: string, abilities: AbilityDTO[] = []) => {
    console.log('üéØ createContextAndMessage chamada com:', {
      userMessage,
      abilitiesCount: abilities.length,
      abilities
    })
  
    if (abilities.length > 0) {
      const contextSection = `**INFORMA√á√ïES ESPEC√çFICAS ENCONTRADAS:**
${abilities.map(ability => `
**${ability.codigo}** - ${ability.objetivo_ou_habilidade}
- **Ano:** ${ability.ano}
- **Eixo:** ${ability.eixo}
- **Descri√ß√£o:** ${ability.descr_objetivo_ou_habilidade}
- **Explica√ß√£o:** ${ability.explicacao}
`).join('\n')}
`
      
      console.log('‚úÖ Contexto BNCC criado')
      return `${contextSection}\n**PERGUNTA DO USU√ÅRIO:** ${userMessage}`
    } else {
      console.log('‚ö†Ô∏è Nenhuma habilidade encontrada - enviando apenas a pergunta')
      return `**PERGUNTA DO USU√ÅRIO:** ${userMessage}`
    }
  }

  return {
    sendMessage,
    isLoading,
    error
  }
}